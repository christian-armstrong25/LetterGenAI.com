{
  "version": 3,
  "sources": ["../../langchain/dist/prompts/base.js"],
  "sourcesContent": ["import { BasePromptValue, HumanChatMessage, } from \"../schema/index.js\";\nexport class StringPromptValue extends BasePromptValue {\n    constructor(value) {\n        super();\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    toChatMessages() {\n        return [new HumanChatMessage(this.value)];\n    }\n}\n/**\n * Base class for prompt templates. Exposes a format method that returns a\n * string prompt given a set of input values.\n */\nexport class BasePromptTemplate {\n    constructor(input) {\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"partialVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { inputVariables } = input;\n        if (inputVariables.includes(\"stop\")) {\n            throw new Error(\"Cannot have an input variable named 'stop', as it is used internally, please rename.\");\n        }\n        Object.assign(this, input);\n    }\n    async mergePartialAndUserVariables(userVariables) {\n        const partialVariables = this.partialVariables ?? {};\n        const partialValues = {};\n        for (const [key, value] of Object.entries(partialVariables)) {\n            if (typeof value === \"string\") {\n                partialValues[key] = value;\n            }\n            else {\n                partialValues[key] = await value();\n            }\n        }\n        const allKwargs = { ...partialValues, ...userVariables };\n        return allKwargs;\n    }\n    /**\n     * Load a prompt template from a json-like object describing it.\n     *\n     * @remarks\n     * Deserializing needs to be async because templates (e.g. {@link FewShotPromptTemplate}) can\n     * reference remote resources that we read asynchronously with a web\n     * request.\n     */\n    static async deserialize(data) {\n        switch (data._type) {\n            case \"prompt\": {\n                const { PromptTemplate } = await import(\"./prompt.js\");\n                return PromptTemplate.deserialize(data);\n            }\n            case undefined: {\n                const { PromptTemplate } = await import(\"./prompt.js\");\n                return PromptTemplate.deserialize({ ...data, _type: \"prompt\" });\n            }\n            case \"few_shot\": {\n                const { FewShotPromptTemplate } = await import(\"./few_shot.js\");\n                return FewShotPromptTemplate.deserialize(data);\n            }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\nexport class BaseStringPromptTemplate extends BasePromptTemplate {\n    async formatPromptValue(values) {\n        const formattedPrompt = await this.format(values);\n        return new StringPromptValue(formattedPrompt);\n    }\n}\n/**\n * Base class for example selectors.\n */\nexport class BaseExampleSelector {\n}\n"],
  "mappings": ";;;;;;AACO,IAAM,oBAAN,cAAgC,gBAAgB;AAAA,EACnD,YAAY,OAAO;AACf,UAAM;AACN,WAAO,eAAe,MAAM,SAAS;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,iBAAiB;AACb,WAAO,CAAC,IAAI,iBAAiB,KAAK,KAAK,CAAC;AAAA,EAC5C;AACJ;AAKO,IAAM,qBAAN,MAAyB;AAAA,EAC5B,YAAY,OAAO;AACf,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,UAAM,EAAE,eAAe,IAAI;AAC3B,QAAI,eAAe,SAAS,MAAM,GAAG;AACjC,YAAM,IAAI,MAAM,sFAAsF;AAAA,IAC1G;AACA,WAAO,OAAO,MAAM,KAAK;AAAA,EAC7B;AAAA,EACA,MAAM,6BAA6B,eAAe;AAC9C,UAAM,mBAAmB,KAAK,oBAAoB,CAAC;AACnD,UAAM,gBAAgB,CAAC;AACvB,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,gBAAgB,GAAG;AACzD,UAAI,OAAO,UAAU,UAAU;AAC3B,sBAAc,GAAG,IAAI;AAAA,MACzB,OACK;AACD,sBAAc,GAAG,IAAI,MAAM,MAAM;AAAA,MACrC;AAAA,IACJ;AACA,UAAM,YAAY,EAAE,GAAG,eAAe,GAAG,cAAc;AACvD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,YAAY,MAAM;AAC3B,YAAQ,KAAK,OAAO;AAAA,MAChB,KAAK,UAAU;AACX,cAAM,EAAE,eAAe,IAAI,MAAM,OAAO,sBAAa;AACrD,eAAO,eAAe,YAAY,IAAI;AAAA,MAC1C;AAAA,MACA,KAAK,QAAW;AACZ,cAAM,EAAE,eAAe,IAAI,MAAM,OAAO,sBAAa;AACrD,eAAO,eAAe,YAAY,EAAE,GAAG,MAAM,OAAO,SAAS,CAAC;AAAA,MAClE;AAAA,MACA,KAAK,YAAY;AACb,cAAM,EAAE,sBAAsB,IAAI,MAAM,OAAO,wBAAe;AAC9D,eAAO,sBAAsB,YAAY,IAAI;AAAA,MACjD;AAAA,MACA;AACI,cAAM,IAAI,MAAM,kCAAkC,KAAK,OAAO;AAAA,IACtE;AAAA,EACJ;AACJ;AACO,IAAM,2BAAN,cAAuC,mBAAmB;AAAA,EAC7D,MAAM,kBAAkB,QAAQ;AAC5B,UAAM,kBAAkB,MAAM,KAAK,OAAO,MAAM;AAChD,WAAO,IAAI,kBAAkB,eAAe;AAAA,EAChD;AACJ;AAIO,IAAM,sBAAN,MAA0B;AACjC;",
  "names": []
}
