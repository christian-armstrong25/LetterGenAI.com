{
  "version": 3,
  "sources": ["../../.pnpm/langchain@0.0.92_mammoth@1.9.0_pdf-parse@1.1.1_puppeteer@19.11.1/node_modules/langchain/dist/chains/llm_chain.js"],
  "sourcesContent": ["import { BaseChain } from \"./base.js\";\nimport { BasePromptTemplate } from \"../prompts/base.js\";\nimport { BaseLanguageModel } from \"../base_language/index.js\";\n/**\n * Chain to run queries against LLMs.\n *\n * @example\n * ```ts\n * import { LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * const prompt = PromptTemplate.fromTemplate(\"Tell me a {adjective} joke\");\n * const llm = new LLMChain({ llm: new OpenAI(), prompt });\n * ```\n */\nexport class LLMChain extends BaseChain {\n    get inputKeys() {\n        return this.prompt.inputVariables;\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text\"\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n        this.llm = fields.llm;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.outputParser = fields.outputParser ?? this.outputParser;\n        if (this.prompt.outputParser) {\n            if (this.outputParser) {\n                throw new Error(\"Cannot set both outputParser and prompt.outputParser\");\n            }\n            this.outputParser = this.prompt.outputParser;\n        }\n    }\n    /** @ignore */\n    async _getFinalOutput(generations, promptValue, runManager) {\n        const completion = generations[0].text;\n        let finalCompletion;\n        if (this.outputParser) {\n            finalCompletion = await this.outputParser.parseWithPrompt(completion, promptValue, runManager?.getChild());\n        }\n        else {\n            finalCompletion = completion;\n        }\n        return finalCompletion;\n    }\n    /**\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    call(values, callbacks) {\n        return super.call(values, callbacks);\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const valuesForPrompt = { ...values };\n        const valuesForLLM = {};\n        for (const key of this.llm.callKeys) {\n            if (key in values) {\n                valuesForLLM[key] = values[key];\n                delete valuesForPrompt[key];\n            }\n        }\n        const promptValue = await this.prompt.formatPromptValue(valuesForPrompt);\n        const { generations } = await this.llm.generatePrompt([promptValue], valuesForLLM, runManager?.getChild());\n        return {\n            [this.outputKey]: await this._getFinalOutput(generations[0], promptValue, runManager),\n        };\n    }\n    /**\n     * Format prompt with values and pass to LLM\n     *\n     * @param values - keys to pass to prompt template\n     * @param callbackManager - CallbackManager to use\n     * @returns Completion from LLM.\n     *\n     * @example\n     * ```ts\n     * llm.predict({ adjective: \"funny\" })\n     * ```\n     */\n    async predict(values, callbackManager) {\n        const output = await this.call(values, callbackManager);\n        return output[this.outputKey];\n    }\n    _chainType() {\n        return \"llm_chain\";\n    }\n    static async deserialize(data) {\n        const { llm, prompt } = data;\n        if (!llm) {\n            throw new Error(\"LLMChain must have llm\");\n        }\n        if (!prompt) {\n            throw new Error(\"LLMChain must have prompt\");\n        }\n        return new LLMChain({\n            llm: await BaseLanguageModel.deserialize(llm),\n            prompt: await BasePromptTemplate.deserialize(prompt),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm: this.llm.serialize(),\n            prompt: this.prompt.serialize(),\n        };\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
