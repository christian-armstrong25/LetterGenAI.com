{
  "version": 3,
  "sources": ["../../.pnpm/langchain@0.0.92_mammoth@1.9.0_pdf-parse@1.1.1_puppeteer@19.11.1/node_modules/langchain/dist/prompts/chat.js", "../../.pnpm/langchain@0.0.92_mammoth@1.9.0_pdf-parse@1.1.1_puppeteer@19.11.1/node_modules/langchain/dist/prompts/selectors/conditional.js", "../../.pnpm/langchain@0.0.92_mammoth@1.9.0_pdf-parse@1.1.1_puppeteer@19.11.1/node_modules/langchain/dist/prompts/selectors/LengthBasedExampleSelector.js", "../../.pnpm/langchain@0.0.92_mammoth@1.9.0_pdf-parse@1.1.1_puppeteer@19.11.1/node_modules/langchain/dist/document.js", "../../.pnpm/langchain@0.0.92_mammoth@1.9.0_pdf-parse@1.1.1_puppeteer@19.11.1/node_modules/langchain/dist/prompts/selectors/SemanticSimilarityExampleSelector.js", "../../.pnpm/langchain@0.0.92_mammoth@1.9.0_pdf-parse@1.1.1_puppeteer@19.11.1/node_modules/langchain/dist/prompts/pipeline.js"],
  "sourcesContent": ["import { AIChatMessage, BasePromptValue, ChatMessage, HumanChatMessage, SystemChatMessage, } from \"../schema/index.js\";\nimport { BasePromptTemplate, } from \"./base.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nexport class BaseMessagePromptTemplate {\n    serialize() {\n        return {\n            _type: this.constructor.name,\n            ...JSON.parse(JSON.stringify(this)),\n        };\n    }\n}\nexport class ChatPromptValue extends BasePromptValue {\n    constructor(messages) {\n        super();\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = messages;\n    }\n    toString() {\n        return JSON.stringify(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n    constructor(variableName) {\n        super();\n        Object.defineProperty(this, \"variableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.variableName = variableName;\n    }\n    get inputVariables() {\n        return [this.variableName];\n    }\n    formatMessages(values) {\n        return Promise.resolve(values[this.variableName]);\n    }\n}\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n    constructor(prompt) {\n        super();\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = prompt;\n    }\n    get inputVariables() {\n        return this.prompt.inputVariables;\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n    constructor(input) {\n        super(input);\n    }\n    async format(values) {\n        return (await this.formatPromptValue(values)).toString();\n    }\n    async formatPromptValue(values) {\n        const resultMessages = await this.formatMessages(values);\n        return new ChatPromptValue(resultMessages);\n    }\n}\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    async format(values) {\n        return new ChatMessage(await this.prompt.format(values), this.role);\n    }\n    constructor(prompt, role) {\n        super(prompt);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = role;\n    }\n    static fromTemplate(template, role) {\n        return new this(PromptTemplate.fromTemplate(template), role);\n    }\n}\nexport class HumanMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    async format(values) {\n        return new HumanChatMessage(await this.prompt.format(values));\n    }\n    constructor(prompt) {\n        super(prompt);\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\nexport class AIMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    async format(values) {\n        return new AIChatMessage(await this.prompt.format(values));\n    }\n    constructor(prompt) {\n        super(prompt);\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\nexport class SystemMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    async format(values) {\n        return new SystemChatMessage(await this.prompt.format(values));\n    }\n    constructor(prompt) {\n        super(prompt);\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"promptMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            const inputVariablesMessages = new Set();\n            for (const promptMessage of this.promptMessages) {\n                for (const inputVariable of promptMessage.inputVariables) {\n                    inputVariablesMessages.add(inputVariable);\n                }\n            }\n            const inputVariablesInstance = new Set(this.partialVariables\n                ? this.inputVariables.concat(Object.keys(this.partialVariables))\n                : this.inputVariables);\n            const difference = new Set([...inputVariablesInstance].filter((x) => !inputVariablesMessages.has(x)));\n            if (difference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...difference,\n                ]}\\` are not used in any of the prompt messages.`);\n            }\n            const otherDifference = new Set([...inputVariablesMessages].filter((x) => !inputVariablesInstance.has(x)));\n            if (otherDifference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...otherDifference,\n                ]}\\` are used in prompt messages but not in the prompt template.`);\n            }\n        }\n    }\n    _getPromptType() {\n        return \"chat\";\n    }\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let resultMessages = [];\n        for (const promptMessage of this.promptMessages) {\n            const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n                if (!(inputVariable in allValues)) {\n                    throw new Error(`Missing value for input variable \\`${inputVariable}\\``);\n                }\n                acc[inputVariable] = allValues[inputVariable];\n                return acc;\n            }, {});\n            const message = await promptMessage.formatMessages(inputValues);\n            resultMessages = resultMessages.concat(message);\n        }\n        return resultMessages;\n    }\n    serialize() {\n        if (this.outputParser !== undefined) {\n            throw new Error(\"ChatPromptTemplate cannot be serialized if outputParser is set\");\n        }\n        return {\n            input_variables: this.inputVariables,\n            prompt_messages: this.promptMessages.map((m) => m.serialize()),\n        };\n    }\n    async partial(values) {\n        // This is implemented in a way it doesn't require making\n        // BaseMessagePromptTemplate aware of .partial()\n        const promptDict = { ...this };\n        promptDict.inputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        promptDict.partialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        return new ChatPromptTemplate(promptDict);\n    }\n    static fromPromptMessages(promptMessages) {\n        const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? promptMessage.promptMessages\n            : [promptMessage]), []);\n        const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) => \n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? Object.assign(acc, promptMessage.partialVariables)\n            : acc, Object.create(null));\n        const inputVariables = new Set();\n        for (const promptMessage of flattenedMessages) {\n            for (const inputVariable of promptMessage.inputVariables) {\n                if (inputVariable in flattenedPartialVariables) {\n                    continue;\n                }\n                inputVariables.add(inputVariable);\n            }\n        }\n        return new ChatPromptTemplate({\n            inputVariables: [...inputVariables],\n            promptMessages: flattenedMessages,\n            partialVariables: flattenedPartialVariables,\n        });\n    }\n}\n", "export class BasePromptSelector {\n    async getPromptAsync(llm, options) {\n        const prompt = this.getPrompt(llm);\n        return prompt.partial(options?.partialVariables ?? {});\n    }\n}\nexport class ConditionalPromptSelector extends BasePromptSelector {\n    constructor(default_prompt, conditionals = []) {\n        super();\n        Object.defineProperty(this, \"defaultPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"conditionals\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.defaultPrompt = default_prompt;\n        this.conditionals = conditionals;\n    }\n    getPrompt(llm) {\n        for (const [condition, prompt] of this.conditionals) {\n            if (condition(llm)) {\n                return prompt;\n            }\n        }\n        return this.defaultPrompt;\n    }\n}\nexport function isLLM(llm) {\n    return llm._modelType() === \"base_llm\";\n}\nexport function isChatModel(llm) {\n    return llm._modelType() === \"base_chat_model\";\n}\n", "function getLengthBased(text) {\n    return text.split(/\\n| /).length;\n}\nexport class LengthBasedExampleSelector {\n    constructor(data) {\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"getTextLength\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getLengthBased\n        });\n        Object.defineProperty(this, \"maxLength\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 2048\n        });\n        Object.defineProperty(this, \"exampleTextLengths\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.examplePrompt = data.examplePrompt;\n        this.maxLength = data.maxLength ?? 2048;\n        this.getTextLength = data.getTextLength ?? getLengthBased;\n    }\n    async addExample(example) {\n        this.examples.push(example);\n        const stringExample = await this.examplePrompt.format(example);\n        this.exampleTextLengths.push(this.getTextLength(stringExample));\n    }\n    async calculateExampleTextLengths(v, values) {\n        if (v.length > 0) {\n            return v;\n        }\n        const { examples, examplePrompt } = values;\n        const stringExamples = await Promise.all(examples.map((eg) => examplePrompt.format(eg)));\n        return stringExamples.map((eg) => this.getTextLength(eg));\n    }\n    async selectExamples(inputVariables) {\n        const inputs = Object.values(inputVariables).join(\" \");\n        let remainingLength = this.maxLength - this.getTextLength(inputs);\n        let i = 0;\n        const examples = [];\n        while (remainingLength > 0 && i < this.examples.length) {\n            const newLength = remainingLength - this.exampleTextLengths[i];\n            if (newLength < 0) {\n                break;\n            }\n            else {\n                examples.push(this.examples[i]);\n                remainingLength = newLength;\n            }\n            i += 1;\n        }\n        return examples;\n    }\n    static async fromExamples(examples, args) {\n        const selector = new LengthBasedExampleSelector(args);\n        await Promise.all(examples.map((eg) => selector.addExample(eg)));\n        return selector;\n    }\n}\n", "/**\n * Interface for interacting with a document.\n */\nexport class Document {\n    constructor(fields) {\n        Object.defineProperty(this, \"pageContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pageContent = fields.pageContent\n            ? fields.pageContent.toString()\n            : this.pageContent;\n        this.metadata = fields.metadata ?? {};\n    }\n}\n", "import { Document } from \"../../document.js\";\nfunction sortedValues(values) {\n    return Object.keys(values)\n        .sort()\n        .map((key) => values[key]);\n}\nexport class SemanticSimilarityExampleSelector {\n    constructor(data) {\n        Object.defineProperty(this, \"vectorStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"exampleKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStore = data.vectorStore;\n        this.k = data.k ?? 4;\n        this.exampleKeys = data.exampleKeys;\n        this.inputKeys = data.inputKeys;\n    }\n    async addExample(example) {\n        const inputKeys = this.inputKeys ?? Object.keys(example);\n        const stringExample = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})).join(\" \");\n        await this.vectorStore.addDocuments([\n            new Document({\n                pageContent: stringExample,\n                metadata: { example },\n            }),\n        ]);\n    }\n    async selectExamples(inputVariables) {\n        const inputKeys = this.inputKeys ?? Object.keys(inputVariables);\n        const query = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: inputVariables[key] }), {})).join(\" \");\n        const exampleDocs = await this.vectorStore.similaritySearch(query, this.k);\n        const examples = exampleDocs.map((doc) => doc.metadata);\n        if (this.exampleKeys) {\n            // If example keys are provided, filter examples to those keys.\n            return examples.map((example) => this.exampleKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {}));\n        }\n        return examples;\n    }\n    static async fromExamples(examples, embeddings, vectorStoreCls, options = {}) {\n        const inputKeys = options.inputKeys ?? null;\n        const stringExamples = examples.map((example) => sortedValues(inputKeys\n            ? inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})\n            : example).join(\" \"));\n        const vectorStore = await vectorStoreCls.fromTexts(stringExamples, examples, // metadatas\n        embeddings, options);\n        return new SemanticSimilarityExampleSelector({\n            vectorStore,\n            k: options.k ?? 4,\n            exampleKeys: options.exampleKeys,\n            inputKeys: options.inputKeys,\n        });\n    }\n}\n", "import { BasePromptTemplate } from \"./base.js\";\nimport { ChatPromptTemplate } from \"./chat.js\";\nexport class PipelinePromptTemplate extends BasePromptTemplate {\n    constructor(input) {\n        super({ ...input, inputVariables: [] });\n        Object.defineProperty(this, \"pipelinePrompts\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"finalPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pipelinePrompts = input.pipelinePrompts;\n        this.finalPrompt = input.finalPrompt;\n        this.inputVariables = this.computeInputValues();\n    }\n    computeInputValues() {\n        const intermediateValues = this.pipelinePrompts.map((pipelinePrompt) => pipelinePrompt.name);\n        const inputValues = this.pipelinePrompts\n            .map((pipelinePrompt) => pipelinePrompt.prompt.inputVariables.filter((inputValue) => !intermediateValues.includes(inputValue)))\n            .flat();\n        return [...new Set(inputValues)];\n    }\n    static extractRequiredInputValues(allValues, requiredValueNames) {\n        return requiredValueNames.reduce((requiredValues, valueName) => {\n            // eslint-disable-next-line no-param-reassign\n            requiredValues[valueName] = allValues[valueName];\n            return requiredValues;\n        }, {});\n    }\n    async formatPipelinePrompts(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        for (const { name: pipelinePromptName, prompt: pipelinePrompt } of this\n            .pipelinePrompts) {\n            const pipelinePromptInputValues = PipelinePromptTemplate.extractRequiredInputValues(allValues, pipelinePrompt.inputVariables);\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (pipelinePrompt instanceof ChatPromptTemplate) {\n                allValues[pipelinePromptName] = await pipelinePrompt.formatMessages(pipelinePromptInputValues);\n            }\n            else {\n                allValues[pipelinePromptName] = await pipelinePrompt.format(pipelinePromptInputValues);\n            }\n        }\n        return PipelinePromptTemplate.extractRequiredInputValues(allValues, this.finalPrompt.inputVariables);\n    }\n    async formatPromptValue(values) {\n        return this.finalPrompt.formatPromptValue(await this.formatPipelinePrompts(values));\n    }\n    async format(values) {\n        return this.finalPrompt.format(await this.formatPipelinePrompts(values));\n    }\n    async partial(values) {\n        const promptDict = { ...this };\n        promptDict.inputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        promptDict.partialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        return new PipelinePromptTemplate(promptDict);\n    }\n    serialize() {\n        throw new Error(\"Not implemented.\");\n    }\n    _getPromptType() {\n        return \"pipeline\";\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
