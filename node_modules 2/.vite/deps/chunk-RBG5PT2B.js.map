{
  "version": 3,
  "sources": ["../../.pnpm/langchain@0.0.92_mammoth@1.9.0_pdf-parse@1.1.1_puppeteer@19.11.1/node_modules/langchain/dist/chains/base.js"],
  "sourcesContent": ["import { RUN_KEY } from \"../schema/index.js\";\nimport { CallbackManager, } from \"../callbacks/manager.js\";\nimport { BaseLangChain } from \"../base_language/index.js\";\n/**\n * Base interface that all chains must implement.\n */\nexport class BaseChain extends BaseLangChain {\n    constructor(fields, \n    /** @deprecated */\n    verbose, \n    /** @deprecated */\n    callbacks) {\n        if (arguments.length === 1 &&\n            typeof fields === \"object\" &&\n            !(\"saveContext\" in fields)) {\n            // fields is not a BaseMemory\n            const { memory, callbackManager, ...rest } = fields;\n            super({ ...rest, callbacks: callbackManager ?? rest.callbacks });\n            this.memory = memory;\n        }\n        else {\n            // fields is a BaseMemory\n            super({ verbose, callbacks });\n            this.memory = fields;\n        }\n    }\n    /**\n     * Return a json-like object representing this chain.\n     */\n    serialize() {\n        throw new Error(\"Method not implemented.\");\n    }\n    async run(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, callbacks) {\n        const isKeylessInput = this.inputKeys.length <= 1;\n        if (!isKeylessInput) {\n            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n        }\n        const values = this.inputKeys.length ? { [this.inputKeys[0]]: input } : {};\n        const returnValues = await this.call(values, callbacks);\n        const keys = Object.keys(returnValues);\n        if (keys.length === 1) {\n            return returnValues[keys[0]];\n        }\n        throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n    }\n    /**\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    async call(values, callbacks) {\n        const fullValues = { ...values };\n        if (!(this.memory == null)) {\n            const newValues = await this.memory.loadMemoryVariables(values);\n            for (const [key, value] of Object.entries(newValues)) {\n                fullValues[key] = value;\n            }\n        }\n        const callbackManager_ = await CallbackManager.configure(callbacks, this.callbacks, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleChainStart({ name: this._chainType() }, fullValues);\n        let outputValues;\n        try {\n            outputValues = await this._call(fullValues, runManager);\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        if (!(this.memory == null)) {\n            await this.memory.saveContext(values, outputValues);\n        }\n        await runManager?.handleChainEnd(outputValues);\n        // add the runManager's currentRunId to the outputValues\n        Object.defineProperty(outputValues, RUN_KEY, {\n            value: runManager ? { runId: runManager?.runId } : undefined,\n            configurable: true,\n        });\n        return outputValues;\n    }\n    /**\n     * Call the chain on all inputs in the list\n     */\n    async apply(inputs, callbacks) {\n        return Promise.all(inputs.map(async (i, idx) => this.call(i, callbacks?.[idx])));\n    }\n    /**\n     * Load a chain from a json-like object describing it.\n     */\n    static async deserialize(data, values = {}) {\n        switch (data._type) {\n            case \"llm_chain\": {\n                const { LLMChain } = await import(\"./llm_chain.js\");\n                return LLMChain.deserialize(data);\n            }\n            case \"sequential_chain\": {\n                const { SequentialChain } = await import(\"./sequential_chain.js\");\n                return SequentialChain.deserialize(data);\n            }\n            case \"simple_sequential_chain\": {\n                const { SimpleSequentialChain } = await import(\"./sequential_chain.js\");\n                return SimpleSequentialChain.deserialize(data);\n            }\n            case \"stuff_documents_chain\": {\n                const { StuffDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return StuffDocumentsChain.deserialize(data);\n            }\n            case \"map_reduce_documents_chain\": {\n                const { MapReduceDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return MapReduceDocumentsChain.deserialize(data);\n            }\n            case \"refine_documents_chain\": {\n                const { RefineDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return RefineDocumentsChain.deserialize(data);\n            }\n            case \"vector_db_qa\": {\n                const { VectorDBQAChain } = await import(\"./vector_db_qa.js\");\n                return VectorDBQAChain.deserialize(data, values);\n            }\n            case \"api_chain\": {\n                const { APIChain } = await import(\"./api/api_chain.js\");\n                return APIChain.deserialize(data);\n            }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
